function _asyncToGenerator(fn){return function(){var gen=fn.apply(this,arguments);return new Promise(function(resolve,reject){function step(key,arg){try{var info=gen[key](arg),value=info.value}catch(error){return void reject(error)}return info.done?void resolve(value):Promise.resolve(value).then(function(value){step('next',value)},function(err){step('throw',err)})}return step('next')})}}import{trackGameInfo}from'./runningGame.js';const isFunction=function(obj){return'function'==typeof obj},events=['loggedIn','summonerInfo','lobby','champSelect','gameLaunched'],leagueClientUxProcessName='LeagueClientUx',leagueClientLogFileIdentifier='LeagueClient.log',lolLauncherId=109021;class LauncherListener{constructor({simpleIO,listeners,identifier}){if(_initialiseProps.call(this),!simpleIO)throw new Error('simpleIO are required');this.simpleIO=simpleIO,this.leagueClientLogFileIdentifier=`${leagueClientLogFileIdentifier}-${identifier}`,overwolf.games.launchers.getRunningLaunchersInfo(this.handleRunningLaunchersInfo),overwolf.games.launchers.onLaunched.addListener(this.handleLaunched),overwolf.games.launchers.onTerminated.addListener(this.handleTerminated),this.listeners=new Map,Object.entries(listeners).forEach(([key,callback])=>{this.addListener(key,callback)}),this.state={},this.trackGameInfo()}}var _initialiseProps=function(){var _this=this;this.trackGameInfo=()=>{// In addition to the log file reader, make use of the Overwolf events.
trackGameInfo({gameLaunchedCallback:()=>{this.setState({gameLaunched:!0})},gameTerminatedCallback:()=>{this.setState({gameLaunched:!1})}})},this.addListener=(label,callback)=>{if(!events.includes(label))throw new Error(`event ${label} is invalid`);this.listeners.has(label)||this.listeners.set(label,[]),this.listeners.get(label).push(callback)},this.removeListener=(label,callback)=>{const listeners=this.listeners.get(label);let index;return!!(listeners&&listeners.length&&(index=listeners.reduce((i,listener,index)=>isFunction(listener)&&listener===callback?i=index:i,-1),-1<index))&&(listeners.splice(index,1),this.listeners.set(label,listeners),!0)},this.emit=(label,...args)=>{const listeners=this.listeners.get(label);return!!(listeners&&listeners.length)&&(listeners.forEach(listener=>{listener(...args)}),!0)},this.destroy=()=>{//overwolf.games.launchers.onUpdated.removeListener(this.handleUpdated);
this.activeListening=!1,overwolf.games.launchers.onLaunched.removeListener(this.handleLaunched),overwolf.games.launchers.onTerminated.removeListener(this.handleTerminated),this.simpleIO.stopFileListen(this.leagueClientLogFileIdentifier),this.simpleIO.stopProcesseListen(leagueClientUxProcessName,()=>{}),this.simpleIO.onFileListenerChanged.removeListener(this.handleLeagueClientChange),clearInterval(this.listenToNewLogFileInterval),console.log('destroyed launcher listener')},this.handleRunningLaunchersInfo=({launchers})=>{const launcher=launchers.find(launcher=>launcher.id===lolLauncherId);return launcher?launcher.path.includes('/PBE/')?void console.error('PBE is not supported'):void(console.log('getRunningLaunchersInfo'),this.initializeListening(launcher)):void 0},this.handleLaunched=launcher=>{launcher.id!==lolLauncherId||(console.log('handleLaunched'),this.initializeListening(launcher))},this.handleUpdated=launcher=>{console.log('handleUpdated',launcher)},this.handleTerminated=launcher=>{this.activeListening=!1,this.simpleIO.stopFileListen(this.leagueClientLogFileIdentifier),this.simpleIO.stopProcesseListen(leagueClientUxProcessName,()=>{}),this.simpleIO.onFileListenerChanged.removeListener(this.handleLeagueClientChange),clearInterval(this.listenToNewLogFileInterval),console.log('handleTerminated',launcher)},this.initializeListening=(()=>{var _ref=_asyncToGenerator(function*(launcher){if(_this.activeListening)return;_this.activeListening=!0,console.log('initializeListening',launcher);const installPath=launcher.path.substr(0,launcher.path.lastIndexOf('/RADS/')+1);_this.simpleIO.onFileListenerChanged.addListener(_this.handleLeagueClientChange),_this.leagueClientSettingsPath=`${installPath}CONFIG/LeagueClientSettings.yaml`;const leagueClientLogDirectory=`${installPath}Logs/LeagueClient Logs/`,filename=yield new Promise(function(resolve){_this.simpleIO.getLatestFileInDirectory(`${leagueClientLogDirectory}*LeagueClient.log`,function(status,filename){status?(console.log('The most update file in this folder is: '+filename),_this.logFilename=filename,resolve(filename)):(console.log('No file found'),resolve())})});_this.listenToNewLogFile(leagueClientLogDirectory);const leagueClientLogPath=`${leagueClientLogDirectory}${filename}`;(_this.listeners.has('loggedIn')||_this.listeners.has('summonerInfo'))&&(_this.simpleIO.getTextFile(leagueClientLogPath,!1,_this.handleLeagueClientLog),_this.simpleIO.getTextFile(_this.leagueClientSettingsPath,!1,_this.handleLeagueClientSettings)),(_this.listeners.has('loggedIn')||_this.listeners.has('champSelect')||_this.listeners.has('lobby'))&&console.log('start listen on file'),_this.simpleIO.listenOnFile(_this.leagueClientLogFileIdentifier,leagueClientLogPath,!0,_this.listenOnLeagueClientChange)});return function(){return _ref.apply(this,arguments)}})(),this.listenToNewLogFile=leagueClientLogDirectory=>{this.listenToNewLogFileInterval||(console.log('listenToNewLogFile'),this.listenToNewLogFileInterval=setInterval(()=>{this.simpleIO.getLatestFileInDirectory(`${leagueClientLogDirectory}*LeagueClient.log`,(status,filename)=>{status&&this.logFilename!==filename&&(console.log('The most update file in this folder is: '+filename),this.logFilename=filename)})},1e3))},this.handleLeagueClientLog=(status,data)=>status?void(/LOGIN_HIDE_EVENT/.test(data)&&this.setState({loggedIn:!0})):console.log('handleLeagueClientLog','failed to get LeagueClient.txt contents',status),this.listenOnLeagueClientChange=(fileId,status)=>(console.log('listenOnLeagueClientChange'),fileId===this.leagueClientLogFileIdentifier?status?void 0:console.log('something bad happened with: '+fileId):void 0),this.handleLeagueClientSettings=(status,data)=>{if(!status)return console.log('handleLeagueClientSettings','failed to get LeagueClientSettings.yaml contents',status);const region=data.match(/region: "(\w+)"/),accountId=data.match(/accountId: (\d+)/);region&&accountId&&this.setState({summonerInfo:{accountId:parseInt(accountId[1]),id:!1,region:region[1]}})},this.handleLeagueClientChange=(id,status,line)=>{id===this.leagueClientLogFileIdentifier&&(this.listeners.has('loggedIn')||this.listeners.has('champSelect')||this.listeners.has('lobby'))&&this.processLogLine(line)},this.processLogLine=line=>{const champSelect=this.getChampSelect(line);/LOGIN_HIDE_EVENT/.test(line)?(this.setState({loggedIn:!0}),this.simpleIO.getTextFile(this.leagueClientSettingsPath,!1,this.handleLeagueClientSettings)):champSelect?this.setState({champSelect}):/GAMEFLOW_EVENT.GAME_LAUNCHED/.test(line)?this.setState({gameLaunched:!0}):/GAMEFLOW_EVENT.TERMINATED/.test(line)||/GAMEFLOW_EVENT.GAME_COMPLETED/.test(line)?this.setState({gameLaunched:!1}):/Shut down EventCollector/.test(line)&&(this.handleTerminated('Shut down EventCollector'),setTimeout(()=>{overwolf.games.launchers.getRunningLaunchersInfo(this.handleRunningLaunchersInfo)},1e3))},this.setState=nextState=>{this.listeners.forEach((value,key)=>{JSON.stringify(this.state[key])!==JSON.stringify(nextState[key])&&(console.log('setState - emit change',key,nextState[key]),this.emit(key,nextState[key]))}),nextState.receivedAt=Date.now(),this.state=nextState},this.getChampSelect=line=>{const champSelect=line.match(/\/lol-champ-select\/v1\/session: (.*)/);if(champSelect)try{// Sometimes logs are cropped
let jsonString=champSelect[1].replace(/,"timer".*/,'}');jsonString=jsonString.replace(/{(.*[[{].+[}\]].*)(,"theirTeam":\[({[^\]]+})).*/,'{$1$2]}');const parsed=JSON.parse(jsonString);return parsed}catch(error){return console.error(error),!1}return!1}};export default LauncherListener;